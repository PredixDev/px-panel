{"version":3,"sources":["px-panel.es6.js"],"names":["Polymer","is","behaviors","IronResizableBehavior","listeners","properties","position","type","String","value","reflectToAttribute","observer","opened","Boolean","notify","fixed","persistent","background","floating","minimizable","fullSize","readOnly","open","close","_persistentChanged","newValue","_onResize","e","debounce","window","innerWidth","innerHeight","_setFullSize","parentNode","getBoundingClientRect","width","height"],"mappings":"aAAA,CAAC,UAAW,CACVA,QAAQ,CAENC,GAAI,UAFE,CAINC,UAAW,CACTF,QAAQG,qBADC,CAJL,CAQNC,UAAW,CACT,cAAe,WADN,CARL,CAYNC,WAAY,CACV;;QAGAC,SAAU,CACRC,KAAMC,MADE,CAERC,MAAO,OAFC,CAGRC,mBAAoB,IAHZ,CAIRC,SAAU,WAJF,CAJA,CAUV;;SAGAC,OAAQ,CACNL,KAAMM,OADA,CAENJ,MAAO,KAFD,CAGNK,OAAQ,IAHF,CAINJ,mBAAoB,IAJd,CAbE,CAmBV;;;SAIAK,MAAO,CACLR,KAAMM,OADD,CAELJ,MAAO,KAFF,CAGLC,mBAAoB,IAHf,CAILC,SAAU,WAJL,CAvBG,CA6BV;;;SAIAK,WAAY,CACVT,KAAMM,OADI,CAEVJ,MAAO,KAFG,CAGVE,SAAU,oBAHA,CAjCF,CAsCV;;;;;SAMAM,WAAY,CACVV,KAAMC,MADI,CAEVC,MAAO,OAFG,CAGVC,mBAAoB,IAHV,CA5CF,CAiDV;;;SAIAQ,SAAU,CACRX,KAAMM,OADE,CAERJ,MAAO,KAFC,CAGRC,mBAAoB,IAHZ,CArDA,CA0DV;;;;SAKAS,YAAa,CACXZ,KAAMM,OADK,CAEXJ,MAAO,KAFI,CAGXC,mBAAoB,IAHT,CA/DH,CAoEV;;;SAIAU,SAAU,CACRb,KAAMM,OADE,CAERJ,MAAO,KAFC,CAGRC,mBAAoB,IAHZ,CAIRW,SAAU,IAJF,CAxEA,CAZN,CA2FN;;MAGAC,IA9FM,gBA8FC,CACL,KAAKV,MAAL,CAAc,IACf,CAhGK,CAiGN;;MAGAW,KApGM,iBAoGE,CACN,GAAG,CAAC,KAAKP,UAAT,CAAqB,CACnB,KAAKJ,MAAL,CAAc,KACf,CACF,CAxGK,CAyGN;;OAGAY,kBA5GM,6BA4GaC,QA5Gb,CA4GuB,CAC3B,GAAGA,UAAY,CAAC,KAAKb,MAArB,CAA6B,CAC3B,KAAKU,IAAL,EACD,CACF,CAhHK,CAkHNI,SAlHM,oBAkHIC,CAlHJ,CAkHO,CACX,KAAKC,QAAL,CAAc,QAAd,CAAwB,UAAW,CACjC,GAAG,KAAKb,KAAR,CAAe,CACb,GAAI,CAAC,KAAKT,QAAL,GAAkB,MAAlB,EAA4B,KAAKA,QAAL,GAAkB,OAA/C,GAA2DuB,OAAOC,UAAP,CAAoB,GAAhF,EACA,CAAC,KAAKxB,QAAL,GAAkB,KAAlB,EAA2B,KAAKA,QAAL,GAAkB,QAA9C,GAA2DuB,OAAOE,WAAP,CAAqB,GADnF,CACyF,CACvF,KAAKC,YAAL,CAAkB,IAAlB,CACD,CAHD,IAIK,CACH,KAAKA,YAAL,CAAkB,KAAlB,CACD,CACF,CARD,IASK,CACH,GAAI,CAAC,KAAK1B,QAAL,GAAkB,MAAlB,EAA4B,KAAKA,QAAL,GAAkB,OAA/C,GAA2D,KAAK2B,UAAL,CAAgBC,qBAAhB,GAAwCC,KAAxC,CAAgD,GAA5G,EACA,CAAC,KAAK7B,QAAL,GAAkB,KAAlB,EAA2B,KAAKA,QAAL,GAAkB,QAA9C,GAA2D,KAAK2B,UAAL,CAAgBC,qBAAhB,GAAwCE,MAAxC,CAAiD,GAD/G,CACqH,CACnH,KAAKJ,YAAL,CAAkB,IAAlB,CACD,CAHD,IAIK,CACH,KAAKA,YAAL,CAAkB,KAAlB,CACD,CACF,CACF,CAnBD,CAmBE,GAnBF,CAoBD,CAvIK,CAAR,CAyID,CA1ID","file":"px-panel.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'px-panel',\n\n    behaviors: [\n      Polymer.IronResizableBehavior\n    ],\n\n    listeners: {\n      'iron-resize': '_onResize'\n    },\n\n    properties: {\n      /**\n      * Where to place the panel - one of `top`, `bottom`, `left`, or `right`.\n      */\n      position: {\n        type: String,\n        value: 'right',\n        reflectToAttribute: true,\n        observer: '_onResize'\n      },\n      /**\n       * Whether the panel is currently open (expanded).\n       */\n      opened: {\n        type: Boolean,\n        value: false,\n        notify: true,\n        reflectToAttribute: true\n      },\n      /**\n       * If set to true, the panel will have `position:fixed` so it will\n       * be attached to the browser window instead of its parent container.\n       */\n      fixed: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n        observer: '_onResize'\n      },\n      /**\n       * If set to true, the panel will be opened and calls to the `close()` method will be ignored.\n       * Mutating the `opened` property will still force a close of the panel.\n       */\n      persistent: {\n        type: Boolean,\n        value: false,\n        observer: '_persistentChanged'\n      },\n      /**\n       * Whether to display the panel with a `light`, `medium`, or `dark` background.\n       * These terms are relative, and can be used in conjunction with px-theme,\n       * px-dark-theme, or your custom theme or CSS variables to toggle between 3 different\n       * background colors.\n       */\n      background: {\n        type: String,\n        value: 'light',\n        reflectToAttribute: true\n      },\n      /**\n       * If set to true, the panel will appear with an offset relative to the screen / container edges.\n       * Can be overridden or customized using the CSS variables.\n       */\n      floating: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * If set to true, the panel will not fully collapse when closed. It will appear in a minimized state.\n       * You can use the content slot `minimized` to determine what will appear inside the panel while minimized\n       * (likely an icon or button for fully opening the panel).\n       */\n      minimizable: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * Used internally to determine if the panel should display at full-width or full-height\n       * for mobile responsiveness and space-constrained situations.\n       */\n      fullSize: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n        readOnly: true\n      }\n    },\n    /**\n    * Opens the panel\n    */\n    open() {\n      this.opened = true;\n    },\n    /**\n    * Closes the panel\n    */\n    close() {\n      if(!this.persistent) {\n        this.opened = false;\n      }\n    },\n    /**\n     * Sets the `opened` property for persistent panels.\n     */\n    _persistentChanged(newValue) {\n      if(newValue && !this.opened) {\n        this.open();\n      }\n    },\n\n    _onResize(e) {\n      this.debounce('resize', function() {\n        if(this.fixed) {\n          if(((this.position === \"left\" || this.position === \"right\") && window.innerWidth < 600) ||\n            ((this.position === \"top\" || this.position === \"bottom\") && window.innerHeight < 600)) {\n            this._setFullSize(true);\n          }\n          else {\n            this._setFullSize(false);\n          }\n        }\n        else {\n          if(((this.position === \"left\" || this.position === \"right\") && this.parentNode.getBoundingClientRect().width < 600) ||\n            ((this.position === \"top\" || this.position === \"bottom\") && this.parentNode.getBoundingClientRect().height < 600)) {\n            this._setFullSize(true);\n          }\n          else {\n            this._setFullSize(false);\n          }\n        }\n      },100);\n    }\n  });\n})();\n"]}